// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Lucasma95/golang-company-api/src/api/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, company
func (_m *CompanyRepository) Create(ctx context.Context, company *entities.Company) error {
	ret := _m.Called(ctx, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByContinent provides a mock function with given fields: ctx, continent
func (_m *CompanyRepository) GetByContinent(ctx context.Context, continent string) ([]entities.Company, error) {
	ret := _m.Called(ctx, continent)

	var r0 []entities.Company
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Company); ok {
		r0 = rf(ctx, continent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, continent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCountryName provides a mock function with given fields: ctx, countryName
func (_m *CompanyRepository) GetByCountryName(ctx context.Context, countryName string) ([]entities.Company, error) {
	ret := _m.Called(ctx, countryName)

	var r0 []entities.Company
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Company); ok {
		r0 = rf(ctx, countryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, countryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CompanyRepository) GetByID(ctx context.Context, id string) (*entities.Company, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Company
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Company); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCompanyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyRepository creates a new instance of CompanyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyRepository(t mockConstructorTestingTNewCompanyRepository) *CompanyRepository {
	mock := &CompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
