// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Lucasma95/golang-company-api/src/api/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// GetCompaniesByCountry is an autogenerated mock type for the GetCompaniesByCountry type
type GetCompaniesByCountry struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, countryName
func (_m *GetCompaniesByCountry) Execute(ctx context.Context, countryName string) ([]entities.Company, error) {
	ret := _m.Called(ctx, countryName)

	var r0 []entities.Company
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Company); ok {
		r0 = rf(ctx, countryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, countryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetCompaniesByCountry interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetCompaniesByCountry creates a new instance of GetCompaniesByCountry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetCompaniesByCountry(t mockConstructorTestingTNewGetCompaniesByCountry) *GetCompaniesByCountry {
	mock := &GetCompaniesByCountry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
